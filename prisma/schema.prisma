datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum FileStatus {
  NOT_RECEIVED
  PROCESSING
  MORE_INFO_REQUIRED
  APPROVED
  REJECTED
}

model File {
  id       String @id @default(uuid())
  accessKey  String     @unique
  barcode    String     @unique
  fileType String?
  name       String?
  department String?
  details    String?
  status     FileStatus @default(NOT_RECEIVED)
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movements Movement[]
  user      User?      @relation(fields: [userId], references: [id])
}

model Office {
  id      String @id @default(uuid())
  name    String
  details String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movements Movement[]
  users     User[]
}

model Movement {
  id       String  @id @default(uuid())
  prevId   String?
  nextId   String?
  comment  String?
  fileId   String
  officeId String
  userId   String?

  createdAt DateTime @default(now())

  file   File   @relation(fields: [fileId], references: [id])
  office Office @relation(fields: [officeId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  STAFF
  ADMIN
}

model User {
  id       String @id @default(uuid())
  uniqueID String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  officeId String?
  password      String?
  role          Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  Authenticator Authenticator[]
  files     File[]
  movements Movement[]
  office    Office?    @relation(fields: [officeId], references: [id])
  sessions      Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id     String @id @default(cuid())
  sessionToken String   @unique
  userId String
  expires      DateTime
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID String @unique
  userId       String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}